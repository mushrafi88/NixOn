set shell zsh   
set shellopts '-euy'
set ifs "\n"
set filesep "\n"

set scrolloff 10
#set icons true
set ignorecase true
set period 1
set hidden true
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'
set autoquit on
set drawbox 


# cmds/functions

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$f";;
        application/pdf) setsid -f org.kde.okular $fx >/dev/null 2>&1 ;;
        video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
        image/*) setsid -f imv $f -quiet >/dev/null 2>&1 ;;
        text/*|application/txt) $EDITOR "$f";;

        *) xdg-open "$f" ;;
    esac
}}


cmd fzf_jump ${{
    res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd extract ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}



cmd yank-dirname $dirname -- "$f" | head -c-1 | wl-copy
cmd yank-path $printf '%s' "$fx" | wl-copy
cmd yank-basename $basename -a -- $fx | head -c-1 | wl-copy

cmd yank-basename-without-extension ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a |
      awk -e '{
        for (i=length($0); i > 0; i--) {
          if (substr($0, i, 1) == ".") {
            if (i == 1) print $0
            else print substr($0, 0, i-1)

            break
          }
        }

        if (i == 0)
          print $0
      }' |
      if [ -n "$fs" ]; then cat; else tr -d '\n'; fi | wl-copy
}}

cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

cmd broot_jump ${{
  f=$(mktemp)
  res="$(broot -h --outcmd $f && cat $f | sed 's/cd //')"
  rm -f "$f"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}


cmd aj %lf -remote "send $id cd '$(autojump $1)'"



%[ $LF_LEVEL -eq 1 ] || echo "Warning: You're in a nested lf instance!"


# Bindings
map d
map y 
map <c-f> $lf -remote "send $id select \"$(fzf)\""
map gh
map g
map gg top
map <c-n> push :mkdir<space>
map <c-r> reload
map <c-s> set hidden!
map <enter> shell
map o &mimeopen "$f"
map O $mimeopen --ask "$f"

map A rename # at the very end
map c push A<c-u> # new rename
map I push A<c-a> # at the very beginning
map i push A<a-b><a-b><a-f> # before extension
map a push A<a-b> # after extension

map yy copy 
map yp yank-path 
map yn yank-basename 

map dD delete
map dd cut 

map <c-j> push :aj<space>

map / :broot_jump

map ga cd /mnt/media_m/Anime/Airing  
map gs cd /mnt/study/fourth_year 
map gd cd /mnt/downloads 
map gh cd /home/venerable_white 
map gc cd ~/.config
map gv cd ~/Videos
map gw cd ~/My\ machine\ learning\ projects
